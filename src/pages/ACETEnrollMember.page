<apex:page controller="ACETEnrollMemberController" docType="html-5.0" id="pageId">
    <apex:includeScript value="{!$Resource.JQuery}"></apex:includeScript>
    <script src="/soap/ajax/20.0/connection.js" type="text/javascript"></script>
    <apex:includeScript value="https://code.jquery.com/ui/1.12.1/jquery-ui.js"/>
    <apex:includeScript value="/soap/ajax/30.0/connection.js"/>    
    <apex:includeScript value="/support/console/30.0/integration.js"/>
    <apex:includeScript value="{!URLFOR($Resource.ACETResources, '/js/main.js')}"/>
    <script language="JavaScript1.2" src="/js/functions.js"></script>
    <apex:stylesheet value="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css"/>
    <style>
        .datePicker{
            position: absolute;
            z-index:10001;
        }
        
        .autodoc{
            vertical-align:middle;
        }
        
        .noDisplay
        {
            display:none;
        }
        
        .custPopup{
            background-color: white;
            border-width: 2px;
            border-style: solid;
            z-index: 9999;
            left: 30%;
            padding:10px;
            position: absolute;
            margin-left: -150px;
            top:100px;
            width:73%;
        }
        
        
        .bPageBlock .labelCol, body .print .topics-label {
            text-align: right;
            font-size: 98%;
            font-weight: bold;
        }
        .btnDisplay {
            color: #333;
            margin: 1px;
            padding: 2px 3px;
            border-width: 1px;
            border-style: solid;
            border-color: #B5B5B5 #B5B5B5 #7F7F7F;
            -moz-border-top-colors: none;
            -moz-border-right-colors: none;
            -moz-border-bottom-colors: none;
            -moz-border-left-colors: none;
            border-image: none;
            background: #E8E8E9 url("/img/alohaSkin/btn_sprite.png") repeat-x scroll right top;
            font-weight: bold;
            font-size: 0.9em;
            border-radius: 3px;
            width: 9%;
            cursor:pointer;
            font-size: 100%;
            font-family: Arial,Helvetica,sans-serif;
            display: inline;
        }
        
    </style>   
    <script src="//code.jquery.com/jquery-1.11.0.min.js"></script>
    <script>
      $(document).ready(function() {
          
          datePickerOnload();
         // acet.autodoc.startAutodoc();
         init();
         
     });
    
    //To Allow only digits for Member ID 
    function init(){
    	$("[id$='memberId']").keypress(function (InputElement) {
    	
            //Allow delete, tab, enter and escape keys through
            if (/^(8|9|13|27)$/.test("" + InputElement.keyCode))
            {
                return true;
            }
    
            var regex = new RegExp("^[0-9]+$");
            var str = String.fromCharCode(!InputElement.charCode ? InputElement.which : InputElement.charCode);
            if (regex.test(str))
            {
                return true;
            }
    
            InputElement.preventDefault();
            return false;
            });
    }
     
    function openCirrusWindow(Cirrus_Link){
        window.open(Cirrus_Link, 'Cirruswindow', 'toolbars=0,width=1200,height=800,left=0,top=0,scrollbars=1,resizable=1');        
    } 
    
    function createCaseItemIfChecked(domId, memberId){
        if(document.getElementById(domId) != null){
            if(document.getElementById(domId).checked ){
                addCaseItem(memberId);
            }
        }
    }
    
    //Select All autodoc checkbox functionality
    function cvCheckAllOrNone(allOrNoneCheckbox) {
        // Find parent table
        var container = allOrNoneCheckbox;
        while (container.tagName != "TABLE") {
            container = container.parentNode;
        }        
        // Switch all checkboxes
        var inputs = container.getElementsByTagName("input");
        var checked = allOrNoneCheckbox.checked;
        for (var i = 0; i < inputs.length; i++) { 
            var input = inputs.item(i);
            if (input.type == "checkbox" ) {
                if (input != allOrNoneCheckbox) {
                    input.checked = checked;
                }
            }
            if(input.className != '' )
            {
                if (input.className === 'notBlankID' )  {
                    console.log('inside');
                    console.log(input.id);
                    var mem = document.getElementById(input.id);
                    var memReq = document.getElementById(mem.parentElement.id).firstChild;
                    if(checked)
                    { 
                           memReq.classList.remove('noDisplay');
                    }
                    else
                    {
                        memReq.classList.add('noDisplay');
                    } 
                }
                if (input.className === 'notBlankDate hasDatepicker')  {
                    var dat = document.getElementById(input.id);
                    var datReq = document.getElementById(dat.parentElement.id).firstChild;
                    if(checked)
                    { 
                        datReq.classList.remove('noDisplay');
                    }
                    else
                    {
                        datReq.classList.add('noDisplay');
                    } 
                }
            }
            
        }
    }   
    
    //Validate Date Entered
    function isValidDate(dateStr) {
        var datePat = /^(\d{1,2})(\/|-)(\d{1,2})\2(\d{2}|\d{4})$/;
        var matchArray = dateStr.match(datePat);
        if (matchArray == null) {
            return false;
        }
        
        month = matchArray[1]; // parse date into variables
        day = matchArray[3];
        year = matchArray[4];
        if (month < 1 || month > 12) { // check month range
            return false;
        }
        if (day < 1 || day > 31) {
            return false;
        }
        if ((month == 4 || month == 6 || month == 9 || month == 11) && day == 31) {
            return false;
        }
        if (month == 2) { // check for february 29th
        var isleap = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));
        if (day > 29 || (day == 29 && !isleap)) {
            return false;
           }
        }
        return true;  // date is valid
    }
 	
 	//Calendar popup
    function datePickerOnload() {
        console.log('inside');     
        $("[id$='effectiveDate']").datepicker({
            changeMonth: true,
                changeYear: true
        });
        
    }
    var j$ = jQuery.noConflict();
    
    //Validate data when adding a row
    function validateData(){     
       var result = true;
        
       j$('input.notBlank').each(function() {
        j$(this).removeClass("error").parent().find(".errorMsg").remove();
        
            if (j$(this).val() == '') {
                var errorMsg1  = "You must enter a value.";
                j$(this).addClass("error").parent().append('<div class="errorMsg"><strong>Error:</strong> ' + errorMsg1 + '</div>')
                result = false;
            }
        });
        
        $("[id$='effectiveDate']").each(function(){ 
           j$(this).removeClass("error").parent().find(".errorMsg").remove();
                var ischecked = $(this).closest("tr").find("input[type='checkbox'].notResolved").is(":checked"); 
                if($(this).val()=='') {
                    if(ischecked )
                    {
                        var errorMsg2  = "You must select a date.";
                        $(this).addClass("error").parent().append('<div class="errorMsg"><strong>Error:</strong> ' + errorMsg2 + '</div>');
                        result = false;
                    }
                }   
                else
                {
                    
                    if(!isValidDate(j$(this).val())){
                    console.log("---validdate--------");
                        var errorMsg = "Invalid Date.";
                        j$(this).addClass("error").parent().append('<div class="errorMsg"><strong>Error:</strong> ' + errorMsg + '</div>');
                        result = false;
                    }
                }  
         });

        $("[id$='memberId']").each(function(){ 
                j$(this).removeClass("error").parent().find(".errorMsg").remove();
                var ischecked = $(this).closest("tr").find("input[type='checkbox'].notResolved").is(":checked"); 
                if(ischecked && ($(this).val()== '') ){
                    var errorMsg1  = "You must enter a value.";
                    $(this).addClass("error").parent().append('<div class="errorMsg"><strong>Error:</strong> ' + errorMsg1 + '</div>');
                    result = false;
                }
         });
               
       if(result == true ){          
          addNewRow();
       }
   }
   
   //Remove the required indicator when system unavailable checkbox is checked
   function removeRequiredIndicator(){
    	var isSystemUnavailable = $("[id$='sysUnavailableChkb']").is(":checked");
    	if(isSystemUnavailable)
    	{
    		$(".requiredBlock").remove();
   		}
   		else
   		{
   			$("[id$='memberFName']").wrap('<div class="requiredInput"></div>').parent().prepend('<div class="requiredBlock" ></div>');
   			$("[id$='memberLName']").wrap('<div class="requiredInput"></div>').parent().prepend('<div class="requiredBlock" ></div>');
   			
   			
   		}
    }
	
	//Validate on click on Save button
   function validate(btnSave)
   {
        var result = true;
        
        //clear error message
        $(".error").parent().find(".errorMsg").remove(); 
        $(".error").removeClass("error");
        $(".requiredBlock").remove();
        
        var isSystemUnavailable = $("[id$='sysUnavailableChkb']").is(":checked");
        console.log(isSystemUnavailable);
        
        if(!isSystemUnavailable)
        {
	        j$('input.notBlank').each(function() {
	        j$(this).removeClass("error").parent().find(".errorMsg").remove();
	        
	            if (j$(this).val() == '') {
	                var errorMsg1  = "You must enter a value.";
	                j$(this).addClass("error").parent().append('<div class="errorMsg"><strong>Error:</strong> ' + errorMsg1 + '</div>')
	                result = false;
	            }
	        });
	        
	        $("[id$='effectiveDate']").each(function(){ 
	           j$(this).removeClass("error").parent().find(".errorMsg").remove();
	
	                var ischecked = $(this).closest("tr").find("input[type='checkbox'].notResolved").is(":checked"); 
	                if($(this).val()=='') {
	                    if(ischecked )
	                    {
	                        var errorMsg2  = "You must select a date.";
	                        $(this).addClass("error").parent().append('<div class="errorMsg"><strong>Error:</strong> ' + errorMsg2 + '</div>');
	                        result = false;
	                    }
	                }   
	                else
	                {
	                    if(!isValidDate(j$(this).val())){
	                        var errorMsg = "Invalid Date.";
	                        j$(this).addClass("error").parent().append('<div class="errorMsg"><strong>Error:</strong> ' + errorMsg + '</div>');
	                        result = false;
	                    }
	                }  
	         });
	
	        $("[id$='memberId']").each(function(){ 
	                j$(this).removeClass("error").parent().find(".errorMsg").remove();             
	                var ischecked = $(this).closest("tr").find("input[type='checkbox'].notResolved").is(":checked"); 
	                if(ischecked && ($(this).val()== '') ){
	                    var errorMsg1  = "You must enter a value.";
	                    $(this).addClass("error").parent().append('<div class="errorMsg"><strong>Error:</strong> ' + errorMsg1 + '</div>');
	                    result = false;
	                }     
	         });
	        //validate at lease one item is checked on
	        
	        var atLeastOneIsChecked = false; 
	        
	        $("[id$='selectMember']").each(function(){ 
	            j$(this).removeClass("error").parent().find(".errorMsg").remove();
	           
	            if($(this).is(':checked')) 
	            {
	               atLeastOneIsChecked = true;
	            } 
	         });
	         
	         if(!atLeastOneIsChecked )
	         {
	               
	            var errorMsg2  = "You must make a selection.";
	            $("[id$='selectMember']").addClass("error").parent().append('<div class="errorMsg"><strong>Error:</strong> ' + errorMsg2 + '</div>');
	            result = false;
	         }
        }   
        return result;
   }
   
   // Assigning required field indicator after adding a row to required fields if resolved box is checked for previous rows
   function checkAndToggle()
   {
         console.log("---------checkAndToggle-----------");         
       var $allcheckId= $("[id$='allcheckboxId']");
       $allcheckId.prop('checked', false);
       
       $("[id$='resolved']").each(function(index){ 
           if($(this).is(":checked")){
             console.log("---------checkAndToggle--if---------");
               var resID = $(this).attr('id');
               var memID = $(this).closest("tr").find('.notBlankID').attr('id');
               var datID = $(this).closest("tr").find('.notBlankDate').attr('id');
               var dat = document.getElementById(datID);
               var mem = document.getElementById(memID);

               var dateReq = document.getElementById(dat.parentElement.id).firstChild;
               var memReq = document.getElementById(mem.parentElement.id).firstChild;

               dateReq.classList.remove('noDisplay');
               memReq.classList.remove('noDisplay');
               
           }
           
         });
            
   }
   
   // If resolved is checked then required field indicator is shown on Member Id and Effective Date and clearing them when resolved is unchecked
   function toggleResolvedEach(autodocChk, dateId, memberId, resolvedId)
   {
        if((resolvedId.checked == false )|| (autodocChk.checked  == false))
        {
            document.getElementById(dateId).value = '';
            document.getElementById(memberId).value = '';
        }
        if( resolvedId.checked) 
        {
        
            document.getElementById(autodocChk).checked = resolvedId.checked;
            var dat = document.getElementById(dateId);
            var mem = document.getElementById(memberId);
            var dateReq = document.getElementById(dat.parentElement.id).firstChild;
            var memReq = document.getElementById(mem.parentElement.id).firstChild;
            
            dateReq.classList.remove('noDisplay');
            memReq.classList.remove('noDisplay');
            
        }  
        else if(resolvedId.checked == false)
        {
            var dat = document.getElementById(dateId);
            var mem = document.getElementById(memberId);
            var dateReq = document.getElementById(dat.parentElement.id).firstChild;
            var memReq = document.getElementById(mem.parentElement.id).firstChild;
            
            dateReq.classList.add('noDisplay');
            memReq.classList.add('noDisplay');
            
        }
        if(autodocChk.checked)
        {
            document.getElementById(resolvedId).checked = autodocChk.checked;
            var dat = document.getElementById(dateId);
            var mem = document.getElementById(memberId);
            var dateReq = document.getElementById(dat.parentElement.id).firstChild;
            var memReq = document.getElementById(mem.parentElement.id).firstChild;
            
            dateReq.classList.remove('noDisplay');
            memReq.classList.remove('noDisplay');
            
        }
        else if(autodocChk.checked == false)
        {
            document.getElementById(resolvedId).checked = autodocChk.checked;
            var dat = document.getElementById(dateId);
            var mem = document.getElementById(memberId);
            var dateReq = document.getElementById(dat.parentElement.id).firstChild;
            var memReq = document.getElementById(mem.parentElement.id).firstChild;
            
            dateReq.classList.add('noDisplay');
            memReq.classList.add('noDisplay');
            
        } 
          
   }  
   function reRenderEnrollPanel(){
       rerenderpanel();
   }
  </script>
 
  <apex:form id="formIds">      
      <apex:actionFunction action="{!addNewRowToEnrollList}" name="addNewRow" oncomplete="reRenderEnrollPanel();" status="refreshMemberStatus"/>
      <apex:actionFunction name="rerenderpanel" reRender="enroll" oncomplete="checkAndToggle();init();" status="refreshMemberStatus"/>
      <apex:actionStatus id="refreshMemberStatus" onstop="datePickerOnload();">
            <apex:facet name="start">
            <div style="position: fixed; top: 0; left: 0; right: 0; bottom: 0; opacity: 0.25; z-index: 1000; background-color: black;">
                &nbsp;
            </div>
            <div style="position: fixed; left: 0; top: 0; bottom: 0; right: 0; z-index: 1001; margin: 15% 50%">
                <div style="display: inline-block; padding: 2px; background-color: #fff; width: 125px;">
                    <img src="/img/loading.gif" style="float: left; margin: 8px;" />
                    <span style="display: inline-block; padding: 10px 0px;">Loading...</span>
                </div>
            </div>
            </apex:facet>
        </apex:actionStatus>
      
      <apex:outputPanel id="hlPanel" layout="none" rendered="{!NOT(panelType)}">
                <apex:inputHidden id="highlightPanelInfo" />
                <c:ACETInteractionHighlightsPanel InteractionAtt="{!wrapper.Interaction}" SubjectAtt="{!wrapper.Subject}" AdditionalInfoAtt="{!wrapper.AdditionalInfo}" html-auto-doc="auto"/>
            </apex:outputPanel>
        <apex:outputPanel rendered="{!panelType}">
        <c:ACETInteractionHighlightsPanel InteractionAtt="{!wrapper.interaction}" SubjectAtt="{!wrapper.Subject}" AdditionalInfoAtt="{!wrapper.AdditionalInfo}" html-auto-doc="auto"/>       
      </apex:outputPanel>
       
      <apex:sectionHeader title="Enroll Subscriber" rendered="{!isEnrollSubscriber}"/>
      <apex:sectionHeader title="Enroll Member" rendered="{!isEnrollMember}"/>
      
      <c:ACETCaseActions attrCaseDataWrapper="{!wrapper}" attrShowSaveButton="true" attrShowMisdirectButton="true" 
            attrSourceOriginator="{!wrapper.SourceOriginator}" attrInteractionId="{!wrapper.Interaction.Id}" attrSubjectId="{!wrapper.Subject.Id}" attrCallTopic="{!wrapper.caseobj.Topic__c}"/>      
      
      <apex:pageBlock id="pbid" mode="edit"> 
          <apex:pageMessages />         
          <apex:pageBlockButtons location="top">
              <input type="button" id="launchCirrusBtn" align ="center" value="Launch Cirrus" onclick="openCirrusWindow('{!swivelcirrus_URL}');" style="margin-left:36px;"/>
          </apex:pageBlockButtons>    
          <apex:outputPanel id="enroll">
          <apex:variable value="{!0}" var="rowNum" />  
          <apex:pageBlockSection columns="1" id="enrollPb" collapsible="False" html-auto-doc="true" html-auto-doc-case-items="true" > 
   
          <apex:pageBlockTable value="{!enrollList}" var="enr" id="enrollListTable" > <!-- columnsWidth="5%,5%,28%,28%,28%,5%">--> 
          
          <apex:column >
            <apex:facet name="header">
                <apex:inputCheckbox onclick="cvCheckAllOrNone(this);acet.autodoc.saveAutodoc('pbid');" title="Toggle All Rows" id="allcheckboxId" />
            </apex:facet>
            <apex:inputCheckbox onclick="createCaseItemIfChecked(this.id,'{!JSENCODE(enr.memberId)}'); acet.autodoc.saveAutodoc('pbid');" onchange="toggleResolvedEach(this,'{!$Component.effectiveDate}','{!$Component.memberId}','{!$Component.resolved}')" id="selectMember" styleClass="selMember"/> 
          </apex:column>
          
          <apex:column headerValue="Action">
            <apex:commandButton value="x" style="color:blue" action="{!removeRowFromEnrollList}" oncomplete="datePickerOnload();" rendered="{!rowNum > 0}" rerender="pbid, enroll" immediate="true" status="refreshMemberStatus">
                 <apex:param value="{!rowNum}" name="rowToRemove" assignTo="{!rowToRemove}"/>
             </apex:commandButton>
             <apex:variable var="rowNum" value="{!rowNum + 1}" id="rowNumId"/>
          </apex:column>
          
          <apex:column headerValue="First Name">
                <apex:outputPanel styleClass="requiredInput" layout="block">                 
                   <apex:outputPanel styleClass="requiredBlock" layout="block"/>
                      <apex:inputText value="{!enr.memberFName}" id="memberFName" styleClass="notBlank"/>
                </apex:outputPanel>
           </apex:column>
           <apex:column headerValue="Last Name">
                <apex:outputPanel styleClass="requiredInput" layout="block">                 
                   <apex:outputPanel styleClass="requiredBlock" layout="block"/>
                      <apex:inputText value="{!enr.memberLName}" id="memberLName" styleClass="notBlank"/>
                </apex:outputPanel>
           </apex:column>
          
          <apex:column headerValue="Effective Date">
                <apex:outputPanel styleClass="requiredInput" layout="block">                 
                   <apex:outputPanel styleClass="requiredBlock noDisplay" layout="block"/>
                       <apex:inputText value="{!enr.effectiveDate}" id="effectiveDate"  styleClass="notBlankDate"/>
                   </apex:outputPanel>
           </apex:column>
           
           <apex:column headerValue="Member ID">
                <apex:outputPanel styleClass="requiredInput" layout="block">                 
                   <apex:outputPanel styleClass="requiredBlock noDisplay" layout="block"/>
                       <apex:inputText value="{!enr.memberId}" id="memberId"  styleClass="notBlankID"/>
                   </apex:outputPanel>
            </apex:column>
          
          <apex:column headerValue="Resolved">
                 <apex:inputCheckbox value="{!enr.isResolved}" id="resolved" onchange="toggleResolvedEach('{!$Component.selectMember}','{!$Component.effectiveDate}','{!$Component.memberId}',this);" styleClass="notResolved"/>
          </apex:column>
        
        </apex:pageBlockTable>
      </apex:pageBlockSection>
      
      <apex:commandButton value="+" onclick="validateData();" style="margin-left: 30px;" reRender="null" oncomplete="checkAndToggle();" immediate="false"/>
    </apex:outputPanel>
            
            <!--- comment and system unavailable section ---->
        <apex:outputPanel id="pbEnrollMemberPanel" layout="block">
            <apex:pageblockSection columns="1" html-auto-doc="auto">
                <apex:pageBlockSectionItem html-auto-doc-item="false">
                        <apex:outputLabel value="Comments"/>
                        <apex:inputTextArea id="comments" cols="100" rows="5" value="{!wrapper.Comments}" style="margin-left:10px;" html-maxlength="3999" />
                </apex:pageBlockSectionItem>
                <apex:pageBlockSectionItem >
                   <apex:outputLabel value="System Unavailable" id="sysUnavailable"/>
                   <apex:inputCheckbox id="sysUnavailableChkb" style="margin-left:10px;" value="{!wrapper.isSystemUnavailable}" onchange="removeRequiredIndicator();"/>
                </apex:pageBlockSectionItem>
            </apex:pageblockSection>
        </apex:outputPanel>
   </apex:pageblock> 
       <c:ACETCaseActions attrCaseDataWrapper="{!wrapper}" attrShowSaveButton="true" attrShowMisdirectButton="true" 
            attrSourceOriginator="{!wrapper.SourceOriginator}" attrInteractionId="{!wrapper.Interaction.Id}" attrSubjectId="{!wrapper.Subject.Id}" attrCallTopic="{!wrapper.caseobj.Topic__c}" attrLocation="bottom"/>
  </apex:form>
</apex:page>