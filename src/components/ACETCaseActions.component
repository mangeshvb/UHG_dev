<apex:component allowDML="true" controller="ACETCaseActionsController" 
    rendered="{!IsComponentVisible}">
    <apex:stylesheet value="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css"/>
    <apex:includeScript value="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></apex:includeScript>
            
    <apex:attribute type="String" name="attrInteractionId"
        description="interaction id" assignTo="{!InteractionId}" />
    <apex:attribute type="String" name="attrSurrogateKey"
        description="Surrogate Key" assignTo="{!SurrogateKey}" />
    <apex:attribute type="String" name="attrSourceOriginator"
        description="source originator" />
    <apex:attribute type="String" name="attrSubjectId"
        description="subject id" />
    <apex:attribute type="String" name="attrCallTopic"
        description="call topic" assignTo="{!CallTopic}" />
    <apex:attribute type="String" name="attrAdditionalInfo"
        description="additional info" />
    <!-- <apex:attribute type="ACETHighlightsPanelAdditionalInfo" name="attrAdditionalInfoHighlightPanel"
        description="additional info highlight panel" assignTo="{!AdditionalInfoHighlightPanel}"/> -->
    <apex:attribute type="String" name="attrRedirectToPage"
        assignTo="{!RedirectToPage}" default="" description="additional info" />
    <apex:attribute type="Boolean" name="attrShowMisdirectButton"
        default="false" description="show misdirect button" />
    <apex:attribute type="Boolean" name="attrShowCancelButton"
        default="false" description="show cancel button" />
    <apex:attribute type="Boolean" name="attrShowENBCancelButton"
        default="false"
        description="This is used for redirecting to previous page by Employer & Broker" />
    <apex:attribute type="Boolean" name="attrShowSaveButton"
        default="false" description="show save button" />
    <apex:attribute type="Boolean" name="attrShowWrapButton"
        default="false" description="show Wrap Interaction button" />
    <apex:attribute type="ApexPages.Action" name="Save" default="false"
        description="Save method from parent" required="false" />
    <apex:attribute type="ApexPages.Action" name="SaveAndClose"
        default="false" description="SaveAndClosemethod from parent"
        required="false" />
    <apex:attribute type="Boolean" name="attrShowSaveAndCloseButton"
        default="false" description="show save and close button" />
    <apex:attribute type="Boolean" name="attrShowClearButton"
        default="false" description="show clear button" />
    <apex:attribute type="Boolean" name="attrRefreshNavigationTab"
        default="false" description="refresh navigation tab" />
    <apex:attribute type="Boolean" name="attrIsProviderFlow"
        default="false" description="if it is from provider flow" />
    <apex:attribute type="ACETCallTopicsDataWrapper"
        name="attrCaseDataWrapper" description="case data wrapper"
        assignTo="{!callTopicDataWrapper}" />
    <apex:attribute type="string" name="casComments"
        description="case comments" />
    <apex:attribute type="string" name="attrLocation" description="location of the component"/>
	
    <apex:outputPanel id="wrapInteractionErrorPanel">
        <div id="noCasesFlag">{!noCasesFlag}</div>
        <div id="noCompleteCasesFlag">{!noCompleteCaseFlag}</div>
    </apex:outputPanel>
    <div id="errorMsg"></div>
    <apex:inputHidden id="autodocHidden"
        value="{!attrCaseDataWrapper.AutoDoc}" />
    <apex:inputHidden id="autodocCommentHidden"
        value="{!attrCaseDataWrapper.AutoDocComment}" /> 
    <apex:inputHidden id="autodocCaseItemsHidden"
        value="{!attrCaseDataWrapper.AutoDocCaseItems}" />  
    <apex:inputHidden id="callTopicTypeHidden"
        value="{!attrCaseDataWrapper.CallTopicType}" />
    <apex:inputHidden id="callTopicSubTypeHidden"
        value="{!attrCaseDataWrapper.CallTopicSubType}" />    
       
    <apex:actionFunction name="sf_saveCase"
        action="{!attrCaseDataWrapper.saveCase}"   />        
    <apex:actionFunction name="sf_saveAndCloseCase"
        action="{!attrCaseDataWrapper.saveAndClose}" />
    <apex:actionFunction name="sf_cancelCase"
        action="{!attrCaseDataWrapper.cancelCase}" />
    <apex:actionFunction name="sf_misdirect"
        action="{!attrCaseDataWrapper.misdirect}" />
    <apex:pageBlock mode="maindetail">        
        <apex:pageBlockButtons location="top">
            <!--- added by Vishakha Research render attribute for not shwing these buttons to research user---->
            <!-- command button gets fired on click on "RETURN/ENTER" on the keyboard, replacing the commandButton with html a tag to avoid that -->
            <apex:outputPanel layout="none" rendered="{!attrShowSaveButton}">
                <input type="button" class="btn" onclick="openDialog();"
                    value="Save" id="btnSaveCase" />
            </apex:outputPanel>
            
            <apex:outputPanel layout="none"
                rendered="{!attrShowSaveAndCloseButton}">
                <input type="button" class="btn" onclick="return saveCase(true)"
                    value="Save and Close" id="btnSaveNClose" />
            </apex:outputPanel>
            <apex:outputPanel layout="none" rendered="{!attrShowCancelButton}">
                <input type="button" class="btn" onclick="return cancelCase()"
                    value="Cancel" id="btnCancelCase" />
            </apex:outputPanel>
            <apex:outputPanel layout="none" rendered="{!attrShowENBCancelButton}">
                <input type="button" class="btn" onclick="return doCancelFunc()"
                    value="Cancel" id="btnCancelNBCase" />
                <apex:actionFunction name="doCancelFunc" action="{!Cancel}" />
            </apex:outputPanel>
            <apex:outputPanel layout="none" rendered="{!attrShowMisdirectButton}">
                <input type="button" class="btn" onclick="return misdirect()"
                    value="Misdirect" id="btnMisdirectCase" />
            </apex:outputPanel>
            <apex:outputPanel layout="none" rendered="{!attrShowWrapButton}">
                <!-- <input type="button" class="btn" onclick="doWrapUpCaseFunc('{!attrSubjectId}')" 
                    value="Wrap Up" id="btnWrapUpCase" />  -->
            <input type="button" class="btn" onclick="startWrapUp();" value="Wrap Up" id="btnWrapUpCase" />
                <apex:actionFunction name="doWrapUpCaseFunc"
                    action="{!wrapInteraction}" reRender="wrapInteractionErrorPanel"
                    oncomplete="wrapInteraction();" >
                    <apex:param name="subjectId" id="subjectId" value=""/>
                    <apex:param name="subjectTabs" id="subjectTabs" value=""/>
              </apex:actionFunction>
            </apex:outputPanel>
           
        </apex:pageBlockButtons>
        <script>
            //var  caseItemArray = new Array();
            $("[id$='wrapInteractionErrorPanel']").css("display","none");
            var modal = document.getElementById('myModal');            
            function saveCase(isCloseCase){                                                                                                                            
                 if(typeof acet.autodoc.getAutodocFromSubTabs !== 'undefined'){
                     acet.autodoc.getAutodocFromSubTabs();                       
                     //wait 500ms to fire event and receive autodoc info from sub tabs
                     setTimeout(function(){                                                        
                         acet.autodoc.saveAutodoc();                            
                         if(isCloseCase){
                             sf_saveAndCloseCase();
                         }else{                            
                             sf_saveCase();
                         }                                                                                    
                     }, 500);    
                 }else{
                     acet.autodoc.saveAutodoc();                            
                     if(isCloseCase){
                         sf_saveAndCloseCase();
                     }else{                         
                         sf_saveCase();
                     } 
                 }
                                                                        
                return false;
            }
           
        
           
            
            function cancelCase(){
                //close all sub tabs if defined
                if(typeof acet.autodoc.closeSubTabs !== 'undefined'){
                    acet.autodoc.closeSubTabs();
                }
                acet.autodoc.saveAutodocComments();
                sf_cancelCase();
                return false;            
            }
   
            
            function misdirect(){            
                var callTopic = '{!attrCallTopic}';
                
                //close all sub tabs if defined
                if(typeof acet.autodoc.closeSubTabs !== 'undefined'){
                    acet.autodoc.closeSubTabs();
                }
                
                //called from call topic page                
                if(callTopic !== '' && callTopic !== 'undefined'){
                    acet.autodoc.saveAutodocComments();
                    sf_misdirect();
                    return false;    
                }else{
                    //called from member/provider search or detail page                   
                    sforce.console.getEnclosingTabId(function(result){
                        var currentTabId = result.success ? result.id : '';
                        console.log("currentTabId : "+currentTabId);
                        var urlParam = 'interactionId={!attrInteractionId}' +'&' + 'contactId={!attrSubjectId}' + '&' + 'sourceOriginator={!attrSourceOriginator}' + '&' + 'additionalInfo={!attrAdditionalInfo}';            
                        urlParam = urlParam + '&' + 'refreshNavigationTab={!attrRefreshNavigationTab}' + '&' + 'closeCallTopicTab=' + currentTabId + '&' + 'currentCaseId=' + '{!attrCaseDataWrapper.CaseObj.id}';                   
                        urlParam = urlParam + '&' + 'isProviderFlow={!attrIsProviderFlow}';
                        urlParam = urlParam + '&' + 'SRK={!attrSurrogateKey}';                                       
                        console.log("urlParam : "+urlParam);
                        var url = 'apex/ACETMisdirectedCall?' + urlParam;
                        console.log("misdirect >> clicked "+url);                                                                                                           
                        sforce.console.getFocusedPrimaryTabId(function(result){  
                            if(result.success){
                                sforce.console.openSubtab(result.id , url, true, 'Cancel', null);    
                            }else{
                                sforce.console.openPrimaryTab(null, url, true, 'Cancel', null, null);    
                            }                                                                             
                        });                                             
                    });                                                           
                           
                    return false;                 
                }                                
            }
                       
            //Added by Khoushik to redirect to Misdirect Page due to Security related to Restricted Policy Numbers
             function createCaseMisdirect(casePage, errorMessage, defaultValue){ 
            
                sforce.console.getEnclosingTabId(function(result){
                    var currentTabId = result.success ? result.id : '';                               
                    var url = 'interactionId={!attrInteractionId}' +'&' + 'contactId={!attrSubjectId}' + '&' + 'sourceOriginator={!attrSourceOriginator}' + '&' + 'additionalInfo={!attrAdditionalInfo}' + '&' + 'callTopic={!attrCallTopic}';            
                    url = url + '&' + 'refreshNavigationTab={!attrRefreshNavigationTab}' + '&' + 'closeCallTopicTab=' + currentTabId + '&' + 'currentCaseId=' + '{!attrCaseDataWrapper.CaseObj.id}';                   
                    url = url + '&' + 'errMsg=' + errorMessage + '&' + 'defaultVal=' + defaultValue;
                    url = 'apex/' + casePage + '?'+ url; 
                    console.log('url'+url);
                    if('{!attrCallTopic}' == 'Enroll Subscriber' || '{!attrCallTopic}' == 'Enroll Family Member' ||'{!attrCallTopic}' == 'Reinstate Subscriber/Family Member' || '{!attrCallTopic}' =='Terminate Subscriber/Family Member')
                    {
                        sforce.console.getEnclosingTabId(closeSubtab);
                    }
                    else
                    {
                        sforce.console.getFocusedPrimaryTabId(function(result){                 
                            if(result.success){
                                sforce.console.openSubtab(result.id , url, true, 'Cancel', null);    
                            }else{
                                sforce.console.openPrimaryTab(null, url, true, 'Cancel', null, null);    
                            }                                                                             
                        });
                    
                    }                       
                });                                                           
                           
                return false; 
            }  
             function createCase(casePage){
               sforce.console.getEnclosingTabId(function(result){
                    var currentTabId = result.success ? result.id : '';
                    console.log('{!attrCallTopic}');
                    
                    var url = 'interactionId={!attrInteractionId}' +'&' + 'contactId={!attrSubjectId}' + '&' + 'sourceOriginator={!attrSourceOriginator}' + '&' + 'additionalInfo={!attrAdditionalInfo}' + '&' + 'callTopic={!attrCallTopic}';            
                    url = url + '&' + 'refreshNavigationTab={!attrRefreshNavigationTab}' + '&' + 'closeCallTopicTab=' + currentTabId + '&' + 'currentCaseId=' + '{!attrCaseDataWrapper.CaseObj.id}';                   
                    url = url + '&' + 'isProviderFlow={!attrIsProviderFlow}';                                       
                    url = 'apex/' + casePage + '?'+ url;                                                           
                    
                    if('{!attrCallTopic}' == 'Enroll Subscriber' || '{!attrCallTopic}' == 'Enroll Family Member' ||'{!attrCallTopic}' == 'Reinstate Subscriber/Family Member' || '{!attrCallTopic}' =='Terminate Subscriber/Family Member')
                    {
                        sf_saveAndCloseCase();
                        sforce.console.getEnclosingTabId(closeSubtab);
                    }
                    else
                    {
                        sforce.console.getFocusedPrimaryTabId(function(result){  
                            console.log(result.id);               
                            if(result.success){
                                sforce.console.openSubtab(result.id , url, true, 'Cancel', null);    
                            }else{
                                sforce.console.openPrimaryTab(null, url, true, 'Cancel', null, null);    
                            }                                                                             
                        });
                    
                    }                       
                });                                                           
                           
                return false; 
            }                        
            
            var closeSubtab = function closeSubtab(result) {    
                var tabId = result.id;
                sforce.console.closeTab(tabId);    
            };        
            
            function startWrapUp(){
                //Check first if it is provider or member
                //localStorage.removeItem('subjectTabArray');
                var subjectTabArrayStr = localStorage.getItem('subjectTabArray');
                if(subjectTabArrayStr){
                //If SubjectTabArray not equals zero. Its Provider wrapup
                    console.log("subjectTabArrayStr >> "+subjectTabArrayStr);
                    var arrayTabs = JSON.parse(JSON.stringify(subjectTabArrayStr));
                    console.log(arrayTabs);
                    doWrapUpCaseFunc('{!attrSubjectId}',arrayTabs);
                }else{
                    //This can be Member wrapup or Provider wrapup. 
                    
                    if('{!attrSubjectId}'){
                        //subject id is present means member wrapup
                        doWrapUpCaseFunc('{!attrSubjectId}',null);
                    }else{
                        //Provider wrap up with no members details open
                        doWrapUpCaseFunc('{!attrSubjectId}',null);
                    }
                }
            }
            
            
            function wrapInteraction(){
               var errorMsg = '';
               $("[id$='wrapInteractionErrorPanel']").css("display","none");
               var noCasesFlag = $("#noCasesFlag").html();
               var noCompleteCasesFlag = $("#noCompleteCasesFlag").html();
               console.log(noCasesFlag);
               console.log(noCompleteCasesFlag);
                             
                if(noCasesFlag == 'true'){
                console.log(1);
                    errorMsg = 'You must create a Case before wrapping up an Interaction.';
                    //$("#errorMsg").html(errorMsg);
                    $("#errorMsgDiv").html('<div class="errorMsg"><strong>Error: </strong>' + errorMsg + '</div>');
                    
                }else if(noCompleteCasesFlag == 'true'){
                console.log(2);
                    errorMsg = 'Complete Call Topics before wrapping up the Interaction.';
                    console.log('else :: '+noCasesFlag);
                    
                    //$("#errorMsg").html(errorMsg); 
                    $("#errorMsgDiv").html('<div class="errorMsg"><strong>Error: </strong>' + errorMsg + '</div>');
                    
                }else{               
                  
                    sforce.console.getFocusedPrimaryTabId(showTabId);
                    var subjectArray = localStorage.getItem('subjectTabArray');
                    
                }    
            }
           var closePrimaryTab = function closePrimaryTab(result) {
                sforce.console.closeTab(result.id);                
           };
           var showTabId = function showTabId(result) {
                //alert('Primarytab IDs: ' + result.id);
                sforce.console.getSubtabIds(result.id, checksubTabId);
           };
           var allopenedsubtabs ;  
           var check = '0';
           var count = 0 ;
           var opensubtabs = 0 ;
           var checksubTabId = function checksubTabId(result) {
               opensubtabs = 0 ;
               count = 0 ;
               check = '0';
               allopenedsubtabs = result.ids ;
               for(i = 0 ; i < subtabIds.length ; i++){
                   //alert('---allopenedsubtabs--->'+allopenedsubtabs+ '------subtabIds---->'+subtabIds);
                   if(allopenedsubtabs.indexOf(subtabIds[i]) != -1){
                       sforce.console.getPageInfo(subtabIds[i], showPageInfo);
                       opensubtabs = 1 ;                       
                   }
                   else{
                       //alert('---TESTING--->');
                       opensubtabs = 2 ; 
                   }
               } 
               if(opensubtabs == 2 ){
                       var refreshNavigationTab = "{!attrRefreshNavigationTab}";
                       if(refreshNavigationTab == 'true'){                             
                           sforce.console.refreshNavigationTab();
                       } 
                       sforce.console.getEnclosingPrimaryTabId(closePrimaryTab);
               }              
           };
           
           var showPageInfo = function showPageInfo(result) {               
               var str = result.pageInfo ;    
               var obj = JSON.parse(str);
               var objId = obj.objectId;
               count = count + 1 ; 
               //alert('--1-check--->'+ check +'----count--->'+ count +'-------len--->'+ allopenedsubtabs.length);
               if(objId == null ){                                   
                   errorMsg = 'Complete Call Topics before wrapping up the Interaction';
                   $("#errorMsgDiv").html('<div class="errorMsg"><strong>Error: </strong>' + errorMsg + '</div>');   
                   check = '1';                                       
               }
               else{
                   errorMsg = '';
                   $("#errorMsgDiv").html('<div class="errorMsg"><strong></strong>' + errorMsg + '</div>');
                   //alert('---check--->'+ check +'----count--->'+ count +'-------len--->'+ allopenedsubtabs.length);
                   var len = allopenedsubtabs.length - 1 ;
                   var subtablen = allopenedsubtabs.length - 3 ; //added by Ranjit
                   if(check == '0' && count == len ){
                       var refreshNavigationTab = "{!attrRefreshNavigationTab}";
                       if(refreshNavigationTab == 'true'){                             
                            sforce.console.refreshNavigationTab();
                       } 
                       sforce.console.getEnclosingPrimaryTabId(closePrimaryTab); 
                   }
                   else if(check == '0' && count == subtablen ){        //added by Ranjit
                       var refreshNavigationTab = "{!attrRefreshNavigationTab}";
                       if(refreshNavigationTab == 'true'){                             
                            sforce.console.refreshNavigationTab();
                       } 
                       sforce.console.getEnclosingPrimaryTabId(closePrimaryTab); 
                   }                
               }              
                                        
           };      
           
         
        </script>
    </apex:pageBlock>
    
    <!-- display a modal window for case type and sub type upon saving a case-->           
    <apex:pageBlock mode="edit" id="caseAddInfoModal" rendered="{!attrShowSaveButton && (attrLocation <> 'bottom')}">
        <apex:pageBlockSection columns="1">            
            <apex:outputpanel style="display:none;">
                <apex:inputField value="{!attrCaseDataWrapper.CaseObj.Topic__c}"/>
            </apex:outputpanel>            
            <apex:outputField value="{!attrCaseDataWrapper.CaseObj.Topic__c}" id="callTopic"/>
            <apex:inputField value="{!attrCaseDataWrapper.CaseObj.Type__c}" id="callTopicType"/>
            <apex:inputField value="{!attrCaseDataWrapper.CaseObj.Subtype__c}" id="callTopicSubType"/>       
        </apex:pageBlockSection>
    </apex:pageBlock>    
    <script>  
          //hide modal element by default in case the page is rendered again by action function
          $("[id$='caseAddInfoModal']").hide();
          
          var ttsFilterStr = '{!attrCaseDataWrapper.TTSFilterStr}';
          var ttsFilter = JSON.parse(ttsFilterStr.replace('&#x27;', '\''));
          
          console.log(ttsFilter);
                      
          function openDialog(){ 
          	  $("[id$='callTopicType'] option").each(function(){              	 
              		//type is not accessible
             		if($(this).val() != '' && ttsFilter[$(this).val()] == undefined){
             	 		$(this).remove();
             		}              	 
              });
                            
              $("[id$='callTopicType']").change(function(){  
              		console.log($(this).val());              	 
              		//subtype is not accessible
              		var callTopicType = $(this).val();
              		if(ttsFilter[callTopicType] != undefined && ttsFilter[callTopicType] != '*'){
              	 		$("[id$='callTopicSubType'] option").each(function(){
              	 			if($(this).val() != '' && ttsFilter[callTopicType].indexOf($(this).val()) == -1){
              	 				$(this).remove();
              	 			}
              	 		}); 	
              		}              	          	               	 		 
              });
                                     	              
              if(typeof validate === 'undefined'  || validate(this)){              	                                      
                 acet.autodoc.saveDialog.dialog("open"); 
              }             
          }
                                     
          $(document).ready(function(){            	             	                                 
              if(!acet.autodoc.saveDialog){                	                                                                  
                  acet.autodoc.saveDialog = $("[id$='caseAddInfoModal']").dialog({
                          autoOpen: false,
                          height: 200,
                          width: 350,
                          modal: true,
                          closeOnEscape: true,
                          title: "Select Type and Subtype",
                          buttons: {
                            "Submit": function(){
                                //assign call topic type and sub type
                                $("[id$='callTopicTypeHidden']").val($("[id$='callTopicType']").val());
                                $("[id$='callTopicSubTypeHidden']").val($("[id$='callTopicSubType']").val());
                                
                                //invoke action fuction and save case                                
                                saveCase(false);                                                        
                            }
                          },
                          close: function() {
                                                        
                          }
                   });                                                                                                                       
              }                                                                                                                                                                                                         
          });
                               
    </script>
</apex:component>