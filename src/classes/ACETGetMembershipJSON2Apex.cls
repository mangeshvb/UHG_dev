//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are reserved words in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class ACETGetMembershipJSON2Apex {
	public static void consumeObject(JSONParser parser) {
		Integer depth = 0;
		do {
			JSONToken curr = parser.getCurrentToken();
			if (curr == JSONToken.START_OBJECT || 
				curr == JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == JSONToken.END_OBJECT ||
				curr == JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}

	public class Memberships {
		public List<CoordinationOfBenefits> coordinationOfBenefits {get;set;} 
		public CustomerAccount customerAccount {get;set;} 
		public List<FinancialAccount> financialAccount {get;set;} 
		public Organization organization {get;set;} 
		public Plan plan {get;set;} 
		public List<ProviderSelection> providerSelection {get;set;} 
		public InsurancePolicyNumberId divisionNumberId {get;set;} 
		public InsuranceTypeCode divisionCode {get;set;} 
		public String lastModifiedDateTime {get;set;} 
		public String migrationDate {get;set;} 
		public InsuranceTypeCode alertCode {get;set;} 
		public List<OtherIndicator> otherIndicator {get;set;} 
		public InsuranceTypeCode planIdentifier {get;set;} 
		public InsuranceTypeCode eligibilitySystemTypeCode {get;set;} 
		public InsuranceTypeCode claimSystemTypeCode {get;set;} 
		public String panelNumber {get;set;} 
		public String coverageSet {get;set;} 
		public String baseMme {get;set;} 
		public String cme {get;set;} 
		public String medicare {get;set;} 
		public List<ClaimOffice> claimOffice {get;set;} 
		public InsuranceTypeCode populationId {get;set;} 
		public InsuranceEffectiveDateRange populationEffectiveDate {get;set;} 
		public String populationRuleFired {get;set;} 
		public String populationTimeStamp {get;set;} 
		public String populationDateAssigned {get;set;} 
		public String certificateOfCoverageYear {get;set;} 
		public InsuranceTypeCode benefitsStatusCode {get;set;} 
		public InsuranceTypeCode coverageLevelCode {get;set;} 
		public InsuranceEffectiveDateRange effectiveDateRange {get;set;} 
		public InsuringRule eligibilityRelationshipCode {get;set;} 
		public EnrolleeIndividualId enrolleeIndividualId {get;set;} 
		public InsurancePolicyNumberId memberMarketNumberId {get;set;} 
		public List<InsurancePolicyNumberId> organizationPopulationGroupId {get;set;} 
		public String organizationPopulationGroupName {get;set;} 
		public InsuranceTypeCode sequenceCode {get;set;} 
		public InsuranceTypeCode sourceSystemCode {get;set;} 
		public InsurancePolicyNumberId subscriberIndividualId {get;set;} 

		public Memberships(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'coordinationOfBenefits') {
							coordinationOfBenefits = new List<CoordinationOfBenefits>();
							while (parser.nextToken() != JSONToken.END_ARRAY) {
								coordinationOfBenefits.add(new CoordinationOfBenefits(parser));
							}
						} else if (text == 'customerAccount') {
							customerAccount = new CustomerAccount(parser);
						} else if (text == 'financialAccount') {
							financialAccount = new List<FinancialAccount>();
							while (parser.nextToken() != JSONToken.END_ARRAY) {
								financialAccount.add(new FinancialAccount(parser));
							}
						} else if (text == 'organization') {
							organization = new Organization(parser);
						} else if (text == 'plan') {
							plan = new Plan(parser);
						} else if (text == 'providerSelection') {
							providerSelection = new List<ProviderSelection>();
							while (parser.nextToken() != JSONToken.END_ARRAY) {
								providerSelection.add(new ProviderSelection(parser));
							}
						} else if (text == 'divisionNumberId') {
							divisionNumberId = new InsurancePolicyNumberId(parser);
						} else if (text == 'divisionCode') {
							divisionCode = new InsuranceTypeCode(parser);
						} else if (text == 'lastModifiedDateTime') {
							lastModifiedDateTime = parser.getText();
						} else if (text == 'migrationDate') {
							migrationDate = parser.getText();
						} else if (text == 'alertCode') {
							alertCode = new InsuranceTypeCode(parser);
						} else if (text == 'otherIndicator') {
							otherIndicator = new List<OtherIndicator>();
							while (parser.nextToken() != JSONToken.END_ARRAY) {
								otherIndicator.add(new OtherIndicator(parser));
							}
						} else if (text == 'planIdentifier') {
							planIdentifier = new InsuranceTypeCode(parser);
						} else if (text == 'eligibilitySystemTypeCode') {
							eligibilitySystemTypeCode = new InsuranceTypeCode(parser);
						} else if (text == 'claimSystemTypeCode') {
							claimSystemTypeCode = new InsuranceTypeCode(parser);
						} else if (text == 'panelNumber') {
							panelNumber = parser.getText();
						} else if (text == 'coverageSet') {
							coverageSet = parser.getText();
						} else if (text == 'baseMme') {
							baseMme = parser.getText();
						} else if (text == 'cme') {
							cme = parser.getText();
						} else if (text == 'medicare') {
							medicare = parser.getText();
						} else if (text == 'claimOffice') {
							claimOffice = new List<ClaimOffice>();
							while (parser.nextToken() != JSONToken.END_ARRAY) {
								claimOffice.add(new ClaimOffice(parser));
							}
						} else if (text == 'populationId') {
							populationId = new InsuranceTypeCode(parser);
						} else if (text == 'populationEffectiveDate') {
							populationEffectiveDate = new InsuranceEffectiveDateRange(parser);
						} else if (text == 'populationRuleFired') {
							populationRuleFired = parser.getText();
						} else if (text == 'populationTimeStamp') {
							populationTimeStamp = parser.getText();
						} else if (text == 'populationDateAssigned') {
							populationDateAssigned = parser.getText();
						} else if (text == 'certificateOfCoverageYear') {
							certificateOfCoverageYear = parser.getText();
						} else if (text == 'benefitsStatusCode') {
							benefitsStatusCode = new InsuranceTypeCode(parser);
						} else if (text == 'coverageLevelCode') {
							coverageLevelCode = new InsuranceTypeCode(parser);
						} else if (text == 'effectiveDateRange') {
							effectiveDateRange = new InsuranceEffectiveDateRange(parser);
						} else if (text == 'eligibilityRelationshipCode') {
							eligibilityRelationshipCode = new InsuringRule(parser);
						} else if (text == 'enrolleeIndividualId') {
							enrolleeIndividualId = new EnrolleeIndividualId(parser);
						} else if (text == 'memberMarketNumberId') {
							memberMarketNumberId = new InsurancePolicyNumberId(parser);
						} else if (text == 'organizationPopulationGroupId') {
							organizationPopulationGroupId = new List<InsurancePolicyNumberId>();
							while (parser.nextToken() != JSONToken.END_ARRAY) {
								organizationPopulationGroupId.add(new InsurancePolicyNumberId(parser));
							}
						} else if (text == 'organizationPopulationGroupName') {
							organizationPopulationGroupName = parser.getText();
						} else if (text == 'sequenceCode') {
							sequenceCode = new InsuranceTypeCode(parser);
						} else if (text == 'sourceSystemCode') {
							sourceSystemCode = new InsuranceTypeCode(parser);
						} else if (text == 'subscriberIndividualId') {
							subscriberIndividualId = new InsurancePolicyNumberId(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Memberships consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class InsuranceEffectiveDateRange {
		public String startDate {get;set;} 
		public String stopDate {get;set;} 

		public InsuranceEffectiveDateRange(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'startDate') {
							startDate = parser.getText();
						} else if (text == 'stopDate') {
							stopDate = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'InsuranceEffectiveDateRange consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class OtherIdentifier {
		public TypeCode otherIdentifierTypeCode {get;set;} 
		public InsurancePolicyNumberId otherId {get;set;} 

		public OtherIdentifier(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'otherIdentifierTypeCode') {
							otherIdentifierTypeCode = new TypeCode(parser);
						} else if (text == 'otherId') {
							otherId = new InsurancePolicyNumberId(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'OtherIdentifier consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class InsuranceTypeCode {
		public String code {get;set;} 

		public InsuranceTypeCode(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'code') {
							code = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'InsuranceTypeCode consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Organization {
		public List<Name> name {get;set;} 
		public InsurancePolicyNumberId organizationId {get;set;} 
		public InsuranceTypeCode typeCode {get;set;} 

		public Organization(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = new List<Name>();
							while (parser.nextToken() != JSONToken.END_ARRAY) {
								name.add(new Name(parser));
							}
						} else if (text == 'organizationId') {
							organizationId = new InsurancePolicyNumberId(parser);
						} else if (text == 'typeCode') {
							typeCode = new InsuranceTypeCode(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Organization consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Address {
		public String line1 {get;set;} 
		public String line2 {get;set;} 
		public String city {get;set;} 
		public InsuranceTypeCode state {get;set;} 
		public PostalCode postalCode {get;set;} 
		public InsuranceTypeCode countyCode {get;set;} 

		public Address(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'line1') {
							line1 = parser.getText();
						} else if (text == 'line2') {
							line2 = parser.getText();
						} else if (text == 'city') {
							city = parser.getText();
						} else if (text == 'state') {
							state = new InsuranceTypeCode(parser);
						} else if (text == 'postalCode') {
							postalCode = new PostalCode(parser);
						} else if (text == 'countyCode') {
							countyCode = new InsuranceTypeCode(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Address consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class PostalCode {
		public String part1 {get;set;} 
		public String part2 {get;set;} 

		public PostalCode(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'part1') {
							part1 = parser.getText();
						} else if (text == 'part2') {
							part2 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'PostalCode consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class PlanLegalEntity {
		public InsurancePolicyNumberId legalEntityIdentifier {get;set;} 

		public PlanLegalEntity(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'legalEntityIdentifier') {
							legalEntityIdentifier = new InsurancePolicyNumberId(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'PlanLegalEntity consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class HealthCareProfessional {
		public List<OtherIdentifier> otherIdentifier {get;set;} 
		public String lastName {get;set;} 
		public String firstName {get;set;} 
		public String middleName {get;set;} 
		public Address address {get;set;} 
		public TelephoneNumber telephoneNumber {get;set;} 
		public InsurancePolicyNumberId professionalId {get;set;} 

		public HealthCareProfessional(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'otherIdentifier') {
							otherIdentifier = new List<OtherIdentifier>();
							while (parser.nextToken() != JSONToken.END_ARRAY) {
								otherIdentifier.add(new OtherIdentifier(parser));
							}
						} else if (text == 'lastName') {
							lastName = parser.getText();
						} else if (text == 'firstName') {
							firstName = parser.getText();
						} else if (text == 'middleName') {
							middleName = parser.getText();
						} else if (text == 'address') {
							address = new Address(parser);
						} else if (text == 'telephoneNumber') {
							telephoneNumber = new TelephoneNumber(parser);
						} else if (text == 'professionalId') {
							professionalId = new InsurancePolicyNumberId(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'HealthCareProfessional consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class TelephoneNumber {
		public TypeCode phoneTypeCode {get;set;} 
		public InsuranceTypeCode areaCode {get;set;} 
		public List<String> telephoneNumber {get;set;} 
		public String extensionNumber {get;set;} 

		public TelephoneNumber(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'phoneTypeCode') {
							phoneTypeCode = new TypeCode(parser);
						} else if (text == 'areaCode') {
							areaCode = new InsuranceTypeCode(parser);
						} else if (text == 'telephoneNumber') {
							telephoneNumber = new List<String>();
							while (parser.nextToken() != JSONToken.END_ARRAY) {
								//telephoneNumber.add(new String(parser));
							}
						} else if (text == 'extensionNumber') {
							extensionNumber = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'TelephoneNumber consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class CustomerPurchase {
		public TypeCode productClassificationCode {get;set;} 
		public InsurancePolicyNumberId customerPurchaseId {get;set;} 
		public FundingArrangementCode fundingArrangementCode {get;set;} 
		public InsuranceTypeCode situsStateCode {get;set;} 

		public CustomerPurchase(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'productClassificationCode') {
							productClassificationCode = new TypeCode(parser);
						} else if (text == 'customerPurchaseId') {
							customerPurchaseId = new InsurancePolicyNumberId(parser);
						} else if (text == 'fundingArrangementCode') {
							fundingArrangementCode = new FundingArrangementCode(parser);
						} else if (text == 'situsStateCode') {
							situsStateCode = new InsuranceTypeCode(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'CustomerPurchase consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class FundingArrangementCode {
		public TypeCode effectiveDateRange {get;set;} 
		public String code {get;set;} 

		public FundingArrangementCode(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'effectiveDateRange') {
							effectiveDateRange = new TypeCode(parser);
						} else if (text == 'code') {
							code = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'FundingArrangementCode consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Name {
		public String name {get;set;} 

		public Name(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Name consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class HealthCoverage {
		public InsuranceTypeCode healthCoverageTypeCode {get;set;} 

		public HealthCoverage(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'healthCoverageTypeCode') {
							healthCoverageTypeCode = new InsuranceTypeCode(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'HealthCoverage consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class OtherIndicator {
		public InsuranceTypeCode typeCode {get;set;} 
		public String id {get;set;} 

		public OtherIndicator(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'typeCode') {
							typeCode = new InsuranceTypeCode(parser);
						} else if (text == 'id') {
							id = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'OtherIndicator consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class PostalCode_Z {
		public String part1 {get;set;} 

		public PostalCode_Z(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'part1') {
							part1 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'PostalCode_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class BusinessSegment {
		public List<PlanMarketSegment> planMarketSegment {get;set;} 

		public BusinessSegment(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'planMarketSegment') {
							planMarketSegment = new List<PlanMarketSegment>();
							while (parser.nextToken() != JSONToken.END_ARRAY) {
								planMarketSegment.add(new PlanMarketSegment(parser));
							}
						} else {
							System.debug(LoggingLevel.WARN, 'BusinessSegment consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ProviderSelection {
		public InsuranceEffectiveDateRange effectiveDateRange {get;set;} 
		public InsurancePolicyNumberId practiceAddressId {get;set;} 
		public InsurancePolicyNumberId networkId {get;set;} 
		public HealthCareProfessional healthCareProfessional {get;set;} 
		public String productCode {get;set;} 
		public InsuranceTypeCode marketType {get;set;} 
		public String marketNumber {get;set;} 
		public InsuranceTypeCode sourceSysCode {get;set;} 

		public ProviderSelection(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'effectiveDateRange') {
							effectiveDateRange = new InsuranceEffectiveDateRange(parser);
						} else if (text == 'practiceAddressId') {
							practiceAddressId = new InsurancePolicyNumberId(parser);
						} else if (text == 'networkId') {
							networkId = new InsurancePolicyNumberId(parser);
						} else if (text == 'healthCareProfessional') {
							healthCareProfessional = new HealthCareProfessional(parser);
						} else if (text == 'productCode') {
							productCode = parser.getText();
						} else if (text == 'marketType') {
							marketType = new InsuranceTypeCode(parser);
						} else if (text == 'marketNumber') {
							marketNumber = parser.getText();
						} else if (text == 'sourceSysCode') {
							sourceSysCode = new InsuranceTypeCode(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'ProviderSelection consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class InsurancePolicyNumberId {
		public String id {get;set;} 

		public InsurancePolicyNumberId(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'InsurancePolicyNumberId consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class InsuringRule {
		public String code {get;set;} 
		public String desc_Z {get;set;} // in json: desc

		public InsuringRule(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'code') {
							code = parser.getText();
						} else if (text == 'desc_Z') {
							desc_Z = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'InsuringRule consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class MembershipResponseType {
		public List<Memberships> memberships {get;set;} 

		public MembershipResponseType(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'memberships') {
							memberships = new List<Memberships>();
							while (parser.nextToken() != JSONToken.END_ARRAY) {
								memberships.add(new Memberships(parser));
							}
						} else {
							System.debug(LoggingLevel.WARN, 'MembershipResponseType consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public GetMembershipResponse getMembershipResponse {get;set;} 

	public ACETGetMembershipJSON2Apex(JSONParser parser) {
		while (parser.nextToken() != JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != JSONToken.VALUE_NULL) {
					if (text == 'getMembershipResponse') {
						getMembershipResponse = new GetMembershipResponse(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'Root consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class TypeCode {

		public TypeCode(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						{
							System.debug(LoggingLevel.WARN, 'TypeCode consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class GetMembershipResponse {
		public MembershipResponseType membershipResponseType {get;set;} 

		public GetMembershipResponse(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'membershipResponseType') {
							membershipResponseType = new MembershipResponseType(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'GetMembershipResponse consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class CoordinationOfBenefits {
		public InsuranceTypeCode insuranceTypeCode {get;set;} 
		public InsurancePolicyNumberId insurancePolicyNumberId {get;set;} 
		public InsuranceTypeCode coverageTypeCode {get;set;} 
		public InsuranceEffectiveDateRange insuranceEffectiveDateRange {get;set;} 
		public String cardHolderFirstName {get;set;} 
		public String cardHolderLastName {get;set;} 
		public String cardHolderTelephone {get;set;} 
		public InsurancePolicyNumberId cardHolderId {get;set;} 
		public InsuranceVerificationDate insuranceVerificationDate {get;set;} 
		public InsuranceTypeCode payerResponsibilitySequenceCode {get;set;} 
		public InsuranceTypeCode medicareEntitlementTypeCode {get;set;} 
		public InsuranceTypeCode uhgOrderOfBenefits {get;set;} 

		public CoordinationOfBenefits(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'insuranceTypeCode') {
							insuranceTypeCode = new InsuranceTypeCode(parser);
						} else if (text == 'insurancePolicyNumberId') {
							insurancePolicyNumberId = new InsurancePolicyNumberId(parser);
						} else if (text == 'coverageTypeCode') {
							coverageTypeCode = new InsuranceTypeCode(parser);
						} else if (text == 'insuranceEffectiveDateRange') {
							insuranceEffectiveDateRange = new InsuranceEffectiveDateRange(parser);
						} else if (text == 'cardHolderFirstName') {
							cardHolderFirstName = parser.getText();
						} else if (text == 'cardHolderLastName') {
							cardHolderLastName = parser.getText();
						} else if (text == 'cardHolderTelephone') {
							cardHolderTelephone = parser.getText();
						} else if (text == 'cardHolderId') {
							cardHolderId = new InsurancePolicyNumberId(parser);
						} else if (text == 'insuranceVerificationDate') {
							insuranceVerificationDate = new InsuranceVerificationDate(parser);
						} else if (text == 'payerResponsibilitySequenceCode') {
							payerResponsibilitySequenceCode = new InsuranceTypeCode(parser);
						} else if (text == 'medicareEntitlementTypeCode') {
							medicareEntitlementTypeCode = new InsuranceTypeCode(parser);
						} else if (text == 'uhgOrderOfBenefits') {
							uhgOrderOfBenefits = new InsuranceTypeCode(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'CoordinationOfBenefits consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class CustomerAccount {
		public List<BusinessArrangement> businessArrangement {get;set;} 
		public List<CustomerPurchase> customerPurchase {get;set;} 
		public List<InsuringRule> insuringRule {get;set;} 
		public InsurancePolicyNumberId customerAccountId {get;set;} 

		public CustomerAccount(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'businessArrangement') {
							businessArrangement = new List<BusinessArrangement>();
							while (parser.nextToken() != JSONToken.END_ARRAY) {
								businessArrangement.add(new BusinessArrangement(parser));
							}
						} else if (text == 'customerPurchase') {
							customerPurchase = new List<CustomerPurchase>();
							while (parser.nextToken() != JSONToken.END_ARRAY) {
								customerPurchase.add(new CustomerPurchase(parser));
							}
						} else if (text == 'insuringRule') {
							insuringRule = new List<InsuringRule>();
							while (parser.nextToken() != JSONToken.END_ARRAY) {
								insuringRule.add(new InsuringRule(parser));
							}
						} else if (text == 'customerAccountId') {
							customerAccountId = new InsurancePolicyNumberId(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'CustomerAccount consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Plan {
		public List<BusinessSegment> businessSegment {get;set;} 
		public List<HealthCoverage> healthCoverage {get;set;} 
		public PlanLegalEntity planLegalEntity {get;set;} 
		public TypeCode benefitSetId {get;set;} 
		public TypeCode planId {get;set;} 
		public String status {get;set;} 
		public String packageBenfitPlan {get;set;} 
		public String name {get;set;} 
		public LegalDescription legalDescription {get;set;} 
		public InsuranceTypeCode planCode {get;set;} 
		public InsuranceTypeCode planTypeCode {get;set;} 
		public InsuranceTypeCode productCode {get;set;} 

		public Plan(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'businessSegment') {
							businessSegment = new List<BusinessSegment>();
							while (parser.nextToken() != JSONToken.END_ARRAY) {
								businessSegment.add(new BusinessSegment(parser));
							}
						} else if (text == 'healthCoverage') {
							healthCoverage = new List<HealthCoverage>();
							while (parser.nextToken() != JSONToken.END_ARRAY) {
								healthCoverage.add(new HealthCoverage(parser));
							}
						} else if (text == 'planLegalEntity') {
							planLegalEntity = new PlanLegalEntity(parser);
						} else if (text == 'benefitSetId') {
							benefitSetId = new TypeCode(parser);
						} else if (text == 'planId') {
							planId = new TypeCode(parser);
						} else if (text == 'status') {
							status = parser.getText();
						} else if (text == 'packageBenfitPlan') {
							packageBenfitPlan = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'legalDescription') {
							legalDescription = new LegalDescription(parser);
						} else if (text == 'planCode') {
							planCode = new InsuranceTypeCode(parser);
						} else if (text == 'planTypeCode') {
							planTypeCode = new InsuranceTypeCode(parser);
						} else if (text == 'productCode') {
							productCode = new InsuranceTypeCode(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Plan consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class PostalAddress {
		public String line1 {get;set;} 
		public String line2 {get;set;} 
		public String city {get;set;} 
		public InsuranceTypeCode state {get;set;} 
		public PostalCode_Z postalCode {get;set;} 
		public InsuranceTypeCode countyCode {get;set;} 

		public PostalAddress(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'line1') {
							line1 = parser.getText();
						} else if (text == 'line2') {
							line2 = parser.getText();
						} else if (text == 'city') {
							city = parser.getText();
						} else if (text == 'state') {
							state = new InsuranceTypeCode(parser);
						} else if (text == 'postalCode') {
							postalCode = new PostalCode_Z(parser);
						} else if (text == 'countyCode') {
							countyCode = new InsuranceTypeCode(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'PostalAddress consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class EnrolleeIndividualId {
		public String sourceSysCode {get;set;} 

		public EnrolleeIndividualId(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'sourceSysCode') {
							sourceSysCode = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'EnrolleeIndividualId consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class LegalDescription {
		public String text {get;set;} 

		public LegalDescription(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'text') {
							text = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'LegalDescription consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class FinancialAccount {
		public String productNumber {get;set;} 
		public String productName {get;set;} 
		public InsuranceTypeCode riskType {get;set;} 
		public InsurancePolicyNumberId individualAccountNumberId {get;set;} 

		public FinancialAccount(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'productNumber') {
							productNumber = parser.getText();
						} else if (text == 'productName') {
							productName = parser.getText();
						} else if (text == 'riskType') {
							riskType = new InsuranceTypeCode(parser);
						} else if (text == 'individualAccountNumberId') {
							individualAccountNumberId = new InsurancePolicyNumberId(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'FinancialAccount consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class PlanMarketSegment {
		public InsuranceTypeCode marketSegmentCode {get;set;} 

		public PlanMarketSegment(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'marketSegmentCode') {
							marketSegmentCode = new InsuranceTypeCode(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'PlanMarketSegment consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class InsuranceVerificationDate {
		public String date2 {get;set;} 

		public InsuranceVerificationDate(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'date') {
							date2 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'InsuranceVerificationDate consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Id {
		public TypeCode typeCode {get;set;} 
		public String id {get;set;} 

		public Id(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'typeCode') {
							typeCode = new TypeCode(parser);
						} else if (text == 'id') {
							id = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Id consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class BusinessArrangement {
		public List<Id> id {get;set;} 

		public BusinessArrangement(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = new List<Id>();
							while (parser.nextToken() != JSONToken.END_ARRAY) {
								//id.add(new Id(parser));
							}
						} else {
							System.debug(LoggingLevel.WARN, 'BusinessArrangement consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ClaimOffice {
		public String name {get;set;} 
		public String tollFreeNumber {get;set;} 
		public String phoneNumber {get;set;} 
		public String officeNumber {get;set;} 
		public PostalAddress postalAddress {get;set;} 

		public ClaimOffice(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'tollFreeNumber') {
							tollFreeNumber = parser.getText();
						} else if (text == 'phoneNumber') {
							phoneNumber = parser.getText();
						} else if (text == 'officeNumber') {
							officeNumber = parser.getText();
						} else if (text == 'postalAddress') {
							postalAddress = new PostalAddress(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'ClaimOffice consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static ACETGetMembershipJSON2Apex parse(String json) {
		return new ACETGetMembershipJSON2Apex(System.JSON.createParser(json));
	}
}